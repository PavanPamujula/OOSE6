import pandas as pd
import numpy as np
from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
np.random.seed(2)

data = pd.read_csv('creditcard.csv')

                    ----- Data Exploration ------
- data.head()

- data[0:2]

- type(data)

- df2 = data.values
  type(df2)
  
                    ---- Data Preprocessing -----
  from sklearn.preprocessing import StandardScaler
data['normalizedAmount'] = StandardScaler().fit_transform(data['Amount'].values.reshape(-1,1))
data = data.drop(['Amount'],axis=1)

- data.head()
 
- data = data.drop(['Time'],axis=1)
data.head()

X = data.iloc[:, data.columns != 'Class']
y = data.iloc[:, data.columns == 'Class']

y.head()

Training and testing the data :
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state=0)

X_train.shape
X_test.shape

                   Implementation of Random Forest Algorithm

from sklearn.ensemble import RandomForestClassifier
random_forest = RandomForestClassifier(n_estimators=100)
random_forest.fit(X_train,y_train.values.ravel())
y_pred = random_forest.predict(X_test)
X_test
random_forest.score(X_test,y_test)

cnf_matrix = confusion_matrix(y_test,y_pred)
labels = [0,1]
sns.heatmap(cnf_matrix, annot=True, cmap="YlGnBu", fmt=".3f", xticklabels=labels, yticklabels=labels)
plt.show()



                            Implementation of DecisionTree
from sklearn.tree import DecisionTreeClassifier 

tree = DecisionTreeClassifier() 

tree.fit(X_train,y_train)

y_pred = tree.predict(X_test)
#y_pred

model1=tree.score(X_test,y_test)
print(model1)


cnf_matrix = confusion_matrix(y_test,y_pred)

labels = [0,1]
sns.heatmap(cnf_matrix, annot=True, cmap="YlGnBu", fmt=".3f", xticklabels=labels, yticklabels=labels)
plt.show()

After getting the output results we'll check for the accuracy which gets the highest value and adapt that algorithm.


import pickle
pickle.dump(random_forest, open('model.pkl','wb'))









